<div id="auth">
    <h1>Authorizinffg</h1>

    <div class="hidden">
        <input type="hidden" class="form-control" name="redirectUrl" id="redirectUrl" value="{{url}}">
        <input type="hidden" class="form-control" name="token" id="token" value="{{externalToken}}">
    </div>

    <div class="auth">

        <div id="state-wait" class="auth__content auth__content--wait" style="display: none;"></div>

        <div id="state-text_input" class="auth__content auth__content--input" style="display: none;"></div>

        <div id="state-face" class="auth__content--face" style="display: none;"></div>

        <div id="state-timer" class="auth__content auth__content--timer" style="display: none;"></div>

        <div class="footer">
            <img class="footer__logo" src="footer-logo.png" alt="biomio logo" title=""/>

            <p class="footer__text">Multi-Factor, Password-Optional Authentication Anywhere, Everywhere</p>
        </div>
    </div>


</div>

<script src="/socket.io/socket.io.js"></script>

<!-- face -->
<script type="text/javascript" src="js/jsfeat/jsfeat-min.js"></script>
<script type="text/javascript" src="js/jsfeat/frontalface.js"></script>
<script type="text/javascript" src="js/jsfeat/compatibility.js"></script>
<script type="text/javascript" src="js/jsfeat/profiler.js"></script>
<script type="text/javascript" src="js/jsfeat/dat.gui.min.js"></script>

<!-- custom -->
<script src="/js/auth.js"></script>
<script src="/js/form.js"></script>
<script src="/js/face.js"></script>

<script>
    var Auth = (function () {
        var socket = io();
        var state = {};

        var init = function () {
            state.$wait = $('#state-wait');
            state.$text_input = $('#state-text_input');
            state.$timer = $('#state-timer');
            state.$face = $('#state-face');

            socketInit();
        };

        var switchToState = function (stateName) {
            state.$wait.hide();
            state.$text_input.hide();
            state.$timer.hide();
            state.$face.hide();
            state['$' + stateName].show();
        };

        var socketInit = function () {
            socket.emit('run-auth');

            socket.on('state-wait', function (response) {
                console.info('state-wait: ', response);
                new Wait({
                    $element: state.$wait
                });
                switchToState('wait');
            });

            socket.on('try:text_input', function (response) {
                console.info('try:text_input: ', response);

                var form = new Form(response.rProperties);

                form.append(state.$text_input);

                form.onSubmit = function (credentials) {
                    console.info('on submit: ', credentials);
                    socket.emit('text_input', credentials);
                };

                switchToState('text_input');
            });

            socket.on('try:face', function (response) {
                console.info('try:face: ', response);

                switchToState('face');

                var face = new Face({
                    debug: true,
                    $element: state.$face,
                    samplesCount: response.samples,
                    validateFrameCount: 10,
                    allowedDeltaSq: 0.25,
                    allowedDeltaCenter: 0.2
                });

                face.onSubmit = function (photos) {
                    console.info('on submit: ', photos);
                    socket.emit('face', photos);
                };

            });

            /** handle get resources request from backend */
            socket.on('resource:face', function (response) {
                console.info('resource:face: ', response);

                var video = document.createElement('video');
                Face.getResources(video, function (err, resources) {
                    console.info('Face.getResources: ', err, resources);

                    if (!err && resources) {
                        socket.emit('resource:face', resources.width + 'x' + resources.height);
                    } else {
                        socket.emit('resource:face', '');
                    }
                });
            });

            socket.on('state-timer', function (response) {
                console.info('state-timer: ', response);
                switchToState('timer');

                App.init({
                    $element: state.$timer,
                    flow: 'token',
                    idHolder: $('#token'),
                    messageHolder: $('#message'),
                    timerHolder: $('#timer'),
                    redirectUrl: $('#redirectUrl').val()
                });

                App.run(response);
            });
        };

        return {
            init: init
        }

    })();

    var Wait = function (params) {
        "use strict";

        var self = this;
        self.$element = params.$element;

        /** init DOM structure */
        var html = {};
        html.title = $("<h2/>").html('Please wait');
        self.$element.append(html.title);

    }


    $(function () {
        Auth.init();
    });

</script>